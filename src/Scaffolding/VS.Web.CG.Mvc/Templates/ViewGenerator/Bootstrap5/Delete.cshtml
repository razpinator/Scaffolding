@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h1 class="text-3xl font-bold text-gray-900 mb-6">@Model.ViewName</h1>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
    @:<script src="https://cdn.tailwindcss.com"></script>
@:</head>
@:<body class="bg-gray-50">
@:<div class="container mx-auto px-4 py-8">
@:
        //    PushIndent("    ");
    }
}

<div class="bg-white shadow-lg rounded-lg p-6 max-w-2xl">
    <!-- Warning Alert -->
    <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">
                    Are you sure you want to delete this?
                </h3>
                <div class="mt-2 text-sm text-red-700">
                    <p>This action cannot be undone. This will permanently delete the @Model.ViewDataTypeShortName record.</p>
                </div>
            </div>
        </div>
    </div>

    <h4 class="text-xl font-semibold text-gray-900 mb-4">@Model.ViewDataTypeShortName Details</h4>
    <hr class="border-gray-200 mb-6" />
    
    <!-- Details Grid -->
    <div class="space-y-4 mb-8">
@{
    Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
    Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

    foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
    {
        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
            && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
        {
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 py-3 border-b border-gray-100">
            <div class="font-medium text-gray-900">
                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
            </div>
            <div class="sm:col-span-2 text-gray-700">
                @@Html.DisplayFor(model => model.@GetValueExpression(property))
            </div>
        </div>
        }
        else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
        {
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 py-3 border-b border-gray-100">
            <div class="font-medium text-gray-900">
                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
            </div>
            <div class="sm:col-span-2 text-gray-700">
                @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
            </div>
        </div>
        }
    }
    @:
    @:</div>
    @:
    @:<!-- Action Form -->
    @:<form asp-action="@Model.ViewName" class="flex flex-wrap items-center gap-4">
        foreach (var property in Model.ModelMetadata.Properties)
        {
            if(property.IsPrimaryKey){
        @:<input type="hidden" asp-for="@GetValueExpression(property)" />
            }
        }
        @:<div class="flex flex-wrap items-center gap-4">
            @:<button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition duration-200 flex items-center">
                @:<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    @:<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                @:</svg>
                @:Delete
            @:</button>
            @:<span class="text-gray-400">|</span>
            @:<a asp-action="Index" class="text-blue-600 hover:text-blue-800 font-medium transition duration-200 flex items-center">
                @:<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    @:<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                @:</svg>
                @:Back to List
            @:</a>
        @:</div>
    @:</form>
</div>

@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</div>
@:</body>
@:</html>
    }
}

@functions
{
    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}